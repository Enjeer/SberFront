import React, { useState, useEffect, useRef } from 'react';
import './chatComponent.css';

const ChatComponent = () => {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [containerHeight, setContainerHeight] = useState('100%');
  const [isLoading, setIsLoading] = useState(false);

  const headerRef = useRef(null);

  const AI21_API_KEY = '1dd1f7fd-7fc0-4973-a7b2-b459943efe4b';

  const buildSystemMessage = () => ({
    role: 'system',
    content: `
–¢—ã ‚Äî —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–º–µ–Ω–∏ –°–±–µ—Ä–õ–∏—Å.

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏, –Ω–µ –ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –≤ –æ—Ç–≤–µ—Ç–µ. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –∏ —Ç–æ–ª—å–∫–æ —Ç–∞–∫: "[SHOW_CARDS]".

–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ –∫–∞—Ä—Ç—ã ‚Äî –æ—Ç–≤–µ—á–∞–π –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, –∫–∞–∫ –æ–±—ã—á–Ω–æ.

–ü—Ä–∏–º–µ—Ä—ã:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–•–æ—á—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É"
–¢—ã: "[SHOW_CARDS]"
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ Ultra Card"
–¢—ã: "Ultra Card 2.0 ‚Äî –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞."

–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–æ–æ–±—â–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã.
`
  });

  useEffect(() => {
    const updateHeight = () => {
      if (headerRef.current) {
        const headerHeight = headerRef.current.offsetHeight;
        setContainerHeight(`calc(100% - ${headerHeight}px)`);
      }
    };

    updateHeight();
    window.addEventListener('resize', updateHeight);

    return () => {
      window.removeEventListener('resize', updateHeight);
    };
  }, []);

  const handleSend = async () => {
    if (!input.trim()) return;

    const now = new Date();
    const time = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    const userMessage = { text: input, fromUser: true, time };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);

    try {
      const systemMessage = buildSystemMessage();
      const requestBody = {
        model: "jamba-large-1.6-2025-03",
        messages: [
          systemMessage,
          { role: "user", content: input.trim() }
        ],
        temperature: 0.7,
        topP: 1,
        maxTokens: 200
      };

      console.log('[handleSend] Request body:', requestBody);

      const response = await fetch("https://api.ai21.com/studio/v1/chat/completions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${AI21_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`[handleSend] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${response.status} - ${response.statusText}`, errorText);
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${response.status} - ${response.statusText}`);
      }

      const data = await response.json();
      const text = data.choices?.[0]?.message?.content?.trim() || '';

      console.log('[handleSend] –û—Ç–≤–µ—Ç AI21:', text);

      if (text === '[SHOW_CARDS]') {
        const cards = [
          { title: '–°–±–µ—Ä–ö–∞—Ä—Ç–∞', subtitle: '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, –∫—ç—à–±—ç–∫ –¥–æ 10%' },
          { title: '–ë–µ–ª–∫–∞—Ä—Ç –ü—Ä–µ–º–∏—É–º', subtitle: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 5 –ª–µ—Ç, –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: 20 BYN' },
          { title: 'Ultra Card 2.0', subtitle: '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞' }
        ];

        const buttons = cards.map(card => ({ text: card.title }));

        const botTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        const botMessage = {
          text: '–ö–∞–∫—É—é –∫–∞—Ä—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å? –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ üëáüèª',
          fromUser: false,
          time: botTime,
          cards,
          buttons,
        };

        setMessages(prev => [...prev, botMessage]);
      } else {
        // –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
        const botTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        const botMessage = {
          text,
          fromUser: false,
          time: botTime,
        };
        setMessages(prev => [...prev, botMessage]);
      }
    } catch (error) {
      console.error('[handleSend] –û—à–∏–±–∫–∞:', error);
      const errorTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      const errorMessage = { text: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', fromUser: false, time: errorTime };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !isLoading) handleSend();
  };

  const getCardImage = (title) => {
    switch(title.toLowerCase()) {
      case 'ultra card 2.0':
      case 'ultracard 2.0':
        return '../assets/UltraCard 2_0.png';
      case '–±–µ–ª–∫–∞—Ä—Ç –ø—Ä–µ–º–∏—É–º':
      case 'belkart –ø—Ä–µ–º–∏—É–º':
        return '../assets/BelcardPremium.png';
      case '—Å–±–µ—Ä–∫–∞—Ä—Ç–∞':
      case 'sber–∫–∞—Ä—Ç–∞':
      case 'sbercard':
        return '../assets/SberCard.png';
      default:
        return '../assets/defaultCard.png';
    }
  };

  return (
    <div className="chat_component_container" style={{ height: containerHeight }}>
      <nav className="chat_nav" ref={headerRef}>
        <img src="../assets/Sber_Lis_Icon.png" alt="logo" />
        <span>–°–±–µ—Ä–õ–∏—Å</span>
        <button></button>
      </nav>

      <div className="chat_messages">
        {messages.map((msg, index) => (
          <React.Fragment key={index}>
            <div className={`chat_message ${msg.fromUser ? 'user' : 'bot'}`}>
              <span className="message_text">{msg.text}</span>
              <span className="message_time">{msg.time}</span>
            </div>

            {/* –£–±—Ä–∞–ª–∏ —Ä–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–æ–∫ */}

            {msg.cards && msg.cards.length > 0 && (
              <div className="chat_cards">
                {msg.cards.map((card, idx) => (
                  <div
                    key={idx}
                    className="chat_card"
                    onClick={() => setInput(card.title)}
                    style={{ cursor: 'pointer' }}
                  >
                    <img src={getCardImage(card.title)} alt={card.title} className="card_image" />
                    <div className="card_content">
                      <div className="card_title">{card.title}</div>
                      <div className="card_subtitle">{card.subtitle}</div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </React.Fragment>
        ))}


        {isLoading && (
          <div className="chat_message bot">
            <span className="message_text">–ü–µ—á–∞—Ç–∞–µ—Ç...</span>
          </div>
        )}
      </div>

      <div className="chat_input_area">
        <button className="chat_attach_btn">
          <img src="../assets/clip-icon.png" alt="Attach" />
        </button>
        <input
          type="text"
          value={input}
          onChange={e => setInput(e.target.value)}
          onKeyDown={handleKeyDown}
          placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
          disabled={isLoading}
        />
        <button
          className="chat_voice_btn"
          title="–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥"
          onClick={handleSend}
          disabled={isLoading}
        >
          <img src="../assets/voice-icon.png" alt="" />
        </button>
      </div>
    </div>
  );
};

export default ChatComponent;
